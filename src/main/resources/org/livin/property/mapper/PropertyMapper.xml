<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.livin.property.mapper.PropertyMapper">

    <sql id="SelectPropertyListBase">
        p
        .
        property_id
        ,
        p.name AS property_name,
        p.detail_address,
        p.property_type,
        p.transaction_type,
        p.jeonse_deposit,
        p.monthly_deposit,
        p.monthly_rent,
        p.main_direction,
        p.description,
        p.floor,
        p.supply_area_m2,
        p.exclusive_area_m2,
        p.created_at AS property_created_at,
        p.sido,
        p.sigungu,
        p.eupmyendong,
        r.is_safe,
        b.total_floors,
        b.road_address,
        pi.image_url
    </sql>

    <sql id="CommonJoins">
        FROM Property p
        LEFT JOIN riskAnalysis r ON p.property_id = r.property_id
        LEFT JOIN Building b ON p.building_id = b.building_id
        LEFT JOIN FavoriteProperty f ON p.property_id = f.property_id AND f.user_id =
        #{userId}
        LEFT
        JOIN
        PropertyImage
        pi
        ON
        p
        .
        property_id
        =
        pi
        .
        property_id
        AND
        pi
        .
        represent
        =
        true
    </sql>

    <!-- ✅ 공통 지역 필터 -->
    <sql id="RegionFilterCondition">
        <if test="sido != null and sido != '전체'">
            AND p.sido = #{sido}
        </if>
        <if test="sigungu != null and sigungu != '전체'">
            AND p.sigungu = #{sigungu}
        </if>
        <if test="eupmyendong != null and eupmyendong != '전체'">
            AND p.eupmyendong = #{eupmyendong}
        </if>
    </sql>

    <!-- ✅ 전세/월세 필터 -->
    <sql id="TransactionTypeFilterCondition">
        <if test="transactionType != null and transactionType != ''">
            AND p.transaction_type = #{transactionType}
        </if>
    </sql>

    <!-- ✅ 안심 매물 필터 -->
    <sql id="SafePropertyFilterCondition">
        <if test="onlySecure != null and onlySecure == true">
            AND r.is_safe = true
        </if>
    </sql>

    <sql id="ChecklistFilterCondition">
        <if test="checklistId != null">
            AND pcl.checklist_id = #{checklistId}
        </if>
    </sql>

    <!-- ✅ 가격대 필터 -->
    <sql id="PriceFilterCondition">
        AND (
        (p.transaction_type = 'JEONSE'
        <if test="jeonseDepositMin != null">
            AND p.jeonse_deposit &gt;= #{jeonseDepositMin}
        </if>
        <if test="jeonseDepositMax != null">
            AND p.jeonse_deposit &lt;= #{jeonseDepositMax}
        </if>
        )
        OR
        (p.transaction_type = 'MONTHLY_RENT'
        <if test="monthlyDepositMin != null">
            AND p.monthly_deposit &gt;= #{monthlyDepositMin}
        </if>
        <if test="monthlyDepositMax != null">
            AND p.monthly_deposit &lt;= #{monthlyDepositMax}
        </if>
        <if test="monthlyMin != null">
            AND p.monthly_rent &gt;= #{monthlyMin}
        </if>
        <if test="monthlyMax != null">
            AND p.monthly_rent &lt;= #{monthlyMax}
        </if>
        )
        )

    </sql>

    <!-- ✅ 관심 매물 조건 -->
    <sql id="FavoriteCondition">
        f
        .
        user_id
        =
        #{userId}
    </sql>

    <select id="countProperties" parameterType="org.livin.property.dto.FilteringDTO" resultType="long">
        SELECT COUNT(DISTINCT p.property_id)
        <include refid="CommonJoins"/>
        <where>
            1 = 1

            <include refid="TransactionTypeFilterCondition"/>

            <include refid="RegionFilterCondition"/>

            <include refid="PriceFilterCondition"/>

            <include refid="SafePropertyFilterCondition"/>

        </where>
    </select>

    <select id="selectPropertyListByRegion" resultMap="BasePropertyMap"
            parameterType="org.livin.property.dto.FilteringDTO">
        SELECT
        <include refid="SelectPropertyListBase"/>,
        CASE WHEN f.user_id IS NOT NULL THEN true ELSE false END AS is_favorite
        <include refid="CommonJoins"/>
        <where>
            1 = 1

            <include refid="TransactionTypeFilterCondition"/>

            <include refid="RegionFilterCondition"/>

            <include refid="PriceFilterCondition"/>

            <include refid="SafePropertyFilterCondition"/>

            <if test="lastCreatedAt != null">
                AND p.created_at &lt; #{lastCreatedAt}
            </if>
        </where>
        ORDER BY p.created_at DESC
        LIMIT #{limit}
    </select>

    <select id="selectFavoritePropertiesWithFilter" resultMap="PropertyMapWithSavedAt"
            parameterType="org.livin.property.dto.FilteringDTO">
        SELECT
        <include refid="SelectPropertyListBase"/>,
        true AS is_favorite,
        f.saved_at
        FROM Property p
        LEFT JOIN riskAnalysis r ON p.property_id = r.property_id
        LEFT JOIN Building b ON p.building_id = b.building_id
        LEFT JOIN PropertyImage pi ON p.property_id = pi.property_id AND pi.represent = true
        INNER JOIN FavoriteProperty f ON p.property_id = f.property_id AND f.user_id = #{userId}
        <if test="checklistId != null">
            INNER JOIN Property_Checklist pcl ON p.property_id = pcl.property_id
        </if>
        <where>
            1 = 1
            <include refid="RegionFilterCondition"/>
            <include refid="SafePropertyFilterCondition"/>
            <include refid="ChecklistFilterCondition"/>

            <if test="lastId != null and lastCreatedAt != null">
                AND (
                f.saved_at &lt; #{lastCreatedAt}
                OR (f.saved_at = #{lastCreatedAt} AND p.property_id &lt; #{lastId})
                )
            </if>
        </where>
        ORDER BY f.saved_at DESC, p.property_id DESC
        LIMIT #{limit}
    </select>

    <delete id="deleteFavoriteProperty" parameterType="map">
        DELETE
        FROM FavoriteProperty
        WHERE property_id = #{propertyId}
          AND user_id = #{userId}
    </delete>

    <insert id="addFavoriteProperty">
        INSERT INTO FavoriteProperty (user_id,
                                      property_id,
                                      saved_at)
        VALUES (#{userId},
                #{propertyId},
                #{savedAt})
    </insert>
    <insert id="createBuilding" parameterType="org.livin.property.entity.BuildingVO"
            useGeneratedKeys="true" keyProperty="buildingId">
        INSERT INTO Building (total_floors,
                              num_parking,
                              parking,
                              elevator,
                              entrance_structure,
                              heating_type,
                              heating_fuel,
                              total_unit,
                              completion_year,
                              postcode,
                              road_address)
        VALUES (#{totalFloors},
                #{numParking},
                #{parking},
                #{elevator},
                #{entranceStructure},
                #{heatingType},
                #{heatingFuel},
                #{totalUnit},
                #{completionYear},
                #{postcode},
                #{roadAddress})
    </insert>
    <insert id="createProperty" parameterType="org.livin.property.entity.PropertyVO"
            useGeneratedKeys="true" keyProperty="propertyId">
        INSERT INTO Property (name,
                              detail_address,
                              jeonse_deposit,
                              monthly_deposit,
                              monthly_rent,
                              property_type,
                              transaction_type,
                              supply_area_m2,
                              exclusive_area_m2,
                              floor,
                              num_room,
                              num_bathrooms,
                              main_direction,
                              duplex_structure,
                              move_in_date,
                              description,
                              created_at,
                              updated_at,
                              sido,
                              sigungu,
                              eupmyendong,
                              property_num,
                              pet,
                              loan,
                              building_id,
                              user_id)
        VALUES (#{name},
                #{detailAddress},
                #{jeonseDeposit},
                #{monthlyDeposit},
                #{monthlyRent},
                #{propertyType},
                #{transactionType},
                #{supplyAreaM2},
                #{exclusiveAreaM2},
                #{floor},
                #{numRoom},
                #{numBathrooms},
                #{mainDirection},
                #{duplexStructure},
                #{moveInDate},
                #{description},
                #{createdAt},
                #{updatedAt},
                #{sido},
                #{sigungu},
                #{eupmyendong},
                #{propertyNum},
                #{pet},
                #{loan},
                #{buildingId},
                #{userId})
    </insert>
    <insert id="createPropertyOptions">
        INSERT INTO Option_Property (property_id, option_id)
        VALUES
        <foreach collection="optionIdList" item="optionId" separator=",">
            (#{propertyId}, #{optionId})
        </foreach>
    </insert>
    <insert id="createManagement">
        INSERT INTO Management (
        property_id,
        management_type,
        management_fee
        ) VALUES
        <foreach collection="managementDTOList" item="management" separator=",">
            (
            #{propertyId},
            #{management.managementType},
            #{management.managementFee}
            )
        </foreach>
    </insert>
    <insert id="createPropertyImages" useGeneratedKeys="true" parameterType="java.util.List">
        INSERT INTO PropertyImage (property_id, image_url, represent)
        VALUES
        <foreach collection="propertyImages" item="item" separator=",">
            (#{item.propertyId}, #{item.imageUrl}, #{item.represent})
        </foreach>
    </insert>

    <select id="checkIfFavoriteExists" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM FavoriteProperty
        WHERE user_id = #{userId}
          AND property_id = #{propertyId}
    </select>

    <select id="selectThumbnailImageByPropertyId" resultType="org.livin.property.entity.PropertyImageVO">
        SELECT property_image_id,
               image_url,
               property_id,
               represent
        FROM PropertyImage
        WHERE property_id = #{propertyId}
          AND represent = true
    </select>

    <select id="selectImagesByPropertyId" resultType="org.livin.property.entity.PropertyImageVO">
        SELECT property_image_id,
               image_url,
               property_id,
               represent
        FROM PropertyImage
        WHERE property_id = #{propertyId}
    </select>

    <select id="findCreatedAtByPropertyId" resultType="java.time.LocalDateTime">
        SELECT created_at
        FROM Property
        WHERE property_id = #{propertyId}
    </select>

    <select id="selectPropertyById" resultMap="PropertyMapWithSavedAt">
        SELECT
        <include refid="SelectPropertyListBase"/>,
        CASE WHEN f.user_id IS NOT NULL THEN true ELSE false END AS is_favorite,
        f.saved_at
        <include refid="CommonJoins"/>
        WHERE p.property_id = #{propertyId}
    </select>

    <!-- ✅ 공통 resultMap -->
    <resultMap id="BasePropertyMap" type="org.livin.property.entity.PropertyVO">
        <id property="propertyId" column="property_id"/>
        <result property="name" column="property_name"/>
        <result property="detailAddress" column="detail_address"/>
        <result property="propertyType" column="property_type"/>
        <result property="transactionType" column="transaction_type"/>
        <result property="jeonseDeposit" column="jeonse_deposit"/>
        <result property="monthlyDeposit" column="monthly_deposit"/>
        <result property="monthlyRent" column="monthly_rent"/>
        <result property="mainDirection" column="main_direction"/>
        <result property="supplyAreaM2" column="supply_area_m2"/>
        <result property="exclusiveAreaM2" column="exclusive_area_m2"/>
        <result property="createdAt" column="property_created_at"/>
        <result property="sido" column="sido"/>
        <result property="sigungu" column="sigungu"/>
        <result property="eupmyendong" column="eupmyendong"/>
        <result property="isSafe" column="is_safe"/>
        <result property="totalFloors" column="total_floors"/>
        <result property="roadAddress" column="road_address"/>
        <result property="thumbnailImageUrl" column="image_url"/>
        <result property="isFavorite" column="is_favorite"/>
    </resultMap>

    <resultMap id="PropertyMapWithSavedAt" type="org.livin.property.entity.PropertyVO" extends="BasePropertyMap">
        <result property="savedAt" column="saved_at"/>
    </resultMap>

    <resultMap id="propertyResultMap" type="org.livin.property.entity.PropertyDetailsVO">
        <id column="p_id" property="propertyId"/>
        <result column="name" property="name"/>
        <result column="detail_address" property="detailAddress"/>
        <result column="jeonse_deposit" property="jeonseDeposit"/>
        <result column="monthly_deposit" property="monthlyDeposit"/>
        <result column="monthly_rent" property="monthlyRent"/>
        <result column="property_type" property="propertyType"/>
        <result column="transaction_type" property="transactionType"/>
        <result column="supply_area_m2" property="supplyAreaM2"/>
        <result column="exclusive_area_m2" property="exclusiveAreaM2"/>
        <result column="floor" property="floor"/>
        <result column="num_room" property="numRoom"/>
        <result column="num_bathrooms" property="numBathrooms"/>
        <result column="main_direction" property="mainDirection"/>
        <result column="duplex_structure" property="duplexStructure"/>
        <result column="move_in_date" property="moveInDate"/>
        <result column="description" property="description"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="sido" property="sido"/>
        <result column="sigungu" property="sigungu"/>
        <result column="eupmyendong" property="eupmyendong"/>
        <result column="property_num" property="propertyNum"/>
        <result column="pet" property="pet"/>
        <result column="loan" property="loan"/>
        <association property="landlordVO" javaType="UserVO">
            <result column="landlord_name" property="name"/>
            <result column="landlord_phone" property="phone"/>
        </association>
        <association property="favoritePropertyVO" javaType="org.livin.property.entity.FavoritePropertyVO">
            <result column="property_id" property="propertyId"/>
            <result column="user_id" property="userId"/>
        </association>
        <association property="buildingVO" javaType="org.livin.property.entity.BuildingVO">
            <result column="building_id" property="buildingId"/>
            <result column="total_floors" property="totalFloors"/>
            <result column="num_parking" property="numParking"/>
            <result column="parking" property="parking"/>
            <result column="elevator" property="elevator"/>
            <result column="entrance_structure" property="entranceStructure"/>
            <result column="heating_type" property="heatingType"/>
            <result column="heating_fuel" property="heatingFuel"/>
            <result column="total_unit" property="totalUnit"/>
            <result column="completion_year" property="completionYear"/>
            <result column="post_code" property="postcode"/>
            <result column="road_address" property="roadAddress"/>
        </association>
        <association property="riskAnalysisVO" javaType="org.livin.risk.entity.RiskAnalysisVO">
            <result column="riskanalysis_id" property="riskAnalysisId"/>
            <result column="is_safe" property="isSafe"/>
            <result column="floating_charge" property="floatingCharge"/>
            <result column="check_landlord" property="checkLandlord"/>
            <result column="injustice_building" property="injusticeBuilding"/>
            <result column="jeonse_ratio" property="jeonseRatio"/>
        </association>
        <collection property="managementVOList" ofType="org.livin.property.entity.ManagementVO">
            <result column="management_type" property="managementType"/>
            <result column="management_fee" property="managementFee"/>
            <result column="exclude_include" property="excludeInclude"/>
        </collection>

        <collection property="propertyImageVOList" ofType="org.livin.property.entity.PropertyImageVO">
            <result column="image_url" property="imageUrl"/>
            <result column="represent" property="represent"/>
        </collection>

        <collection property="optionVOList" ofType="org.livin.property.entity.OptionVO">
            <result column="option_id" property="optionId"/>
            <result column="option_type" property="optionType"/>
        </collection>
    </resultMap>

    <select id="getPropertyDetailsById" resultMap="propertyResultMap">
        SELECT p.property_id      AS p_id,
               p.name,
               p.detail_address,
               p.jeonse_deposit,
               p.monthly_deposit,
               p.monthly_rent,
               p.property_type,
               p.transaction_type,
               p.supply_area_m2,
               p.exclusive_area_m2,
               p.floor,
               p.num_room,
               p.num_bathrooms,
               p.main_direction,
               p.duplex_structure,
               p.move_in_date,
               p.description,
               p.created_at,
               p.updated_at,
               p.sido,
               p.sigungu,
               p.eupmyendong,
               p.property_num,
               p.pet,
               p.loan,

               -- Landlord (User) 테이블 컬럼
               l.name             AS landlord_name,
               l.phone            AS landlord_phone,

               -- FavoriteProperty 테이블 컬럼
               fp.property_id     AS favorite_property_id,
               fp.user_id,

               -- Building 테이블 컬럼
               b.building_id,
               b.total_floors,
               b.num_parking,
               b.parking,
               b.elevator,
               b.entrance_structure,
               b.heating_type,
               b.heating_fuel,
               b.total_unit,
               b.completion_year,
               b.postcode         AS post_code,
               b.road_address,

               -- riskAnalysis 테이블 컬럼
               ra.riskAnalysis_id AS riskanalysis_id,
               ra.is_safe,
               ra.floating_charge,
               ra.check_landlord,
               ra.injustice_building,
               ra.jeonse_ratio,

               -- Management 테이블 컬럼
               m.management_type,
               m.management_fee,
               m.exclude_include,

               -- PropertyImage 테이블 컬럼
               pi.image_url,
               pi.represent,

               -- Option 테이블 컬럼
               opt.option_id,
               opt.option_type

        FROM Property p
                 LEFT JOIN User l ON p.user_id = l.user_id
                 LEFT JOIN Building b ON p.building_id = b.building_id
                 LEFT JOIN riskAnalysis ra ON p.property_id = ra.property_id
                 LEFT JOIN Management m ON p.property_id = m.property_id
                 LEFT JOIN PropertyImage pi ON p.property_id = pi.property_id
                 LEFT JOIN Option_Property op ON p.property_id = op.property_id
                 LEFT JOIN `Option` opt ON op.option_id = opt.option_id
                 LEFT JOIN FavoriteProperty fp ON p.property_id = fp.property_id AND fp.user_id = #{userId}
        WHERE p.property_id = #{propertyId}
    </select>
    <select id="existsBuilding" resultType="java.lang.Boolean">
        SELECT EXISTS (SELECT 1
                       FROM Building
                       WHERE road_address = #{roadAddress})
    </select>
    <select id="getBuilding" parameterType="java.lang.String" resultType="org.livin.property.entity.BuildingVO">
        SELECT building_id        AS buildingId,
               total_floors       AS totalFloors,
               num_parking        AS numParking,
               parking,
               elevator,
               entrance_structure AS entranceStructure,
               heating_type       AS heatingType,
               heating_fuel       AS heatingFuel,
               total_unit         AS totalUnit,
               completion_year    AS completionYear,
               postcode,
               road_address       AS roadAddress
        FROM Building
        WHERE road_address = #{roadAddress}
    </select>
    <select id="getOptionList" resultType="OptionVO">
        SELECT *
        FROM `Option`
    </select>
</mapper>