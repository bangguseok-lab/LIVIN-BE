<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.livin.property.mapper.PropertyChecklistMapper">

    <!--user_id로 체크리스트 제목 목록 조회 (최신순)-->
    <select id="selectChecklistTitlesByUserId"
            resultType="org.livin.property.dto.ChecklistTitleDTO">
        SELECT
            checklist_id AS checklistId,
            title
        FROM Checklist
        WHERE
            user_id = #{userId}
          -- 이 조건을 추가하여, 제목이 '(숫자)'로 끝나지 않는 것만 조회
          -- (체크리스트 목록에는 복제한 체크리스트까지 포함되지 않아야 하므로)
          AND
            title NOT REGEXP '\\([0-9]+\\)$'
        ORDER BY created_at DESC
    </select>

<!--  ===========================================================================================  -->

    <!--3개의 삭제 메서드 선언 추가-->
    <delete id="deletePropertyChecklistLink">
        DELETE FROM Property_Checklist WHERE checklist_id = #{checklistId}
    </delete>

    <delete id="deleteChecklistItemsByChecklistId">
        DELETE FROM ChecklistItem WHERE checklist_id = #{checklistId}
    </delete>

    <delete id="deleteChecklistById">
        DELETE FROM Checklist WHERE checklist_id = #{checklistId}
    </delete>

    <!--원본 Checklist 조회-->
    <select id="findChecklistByIdAndUserId" resultType="org.livin.property.entity.ChecklistVO">
        SELECT * FROM Checklist WHERE checklist_id = #{checklistId} AND user_id = #{userId}
    </select>

    <!--원본 ChecklistItem 목록 조회-->
    <select id="findItemsByChecklistId" resultType="org.livin.property.entity.ChecklistItemVO">
        SELECT * FROM ChecklistItem WHERE checklist_id = #{checklistId}
    </select>

    <!--복제된 Checklist 삽입 및 생성된 ID 받아오기-->
    <insert id="insertAndGetId" useGeneratedKeys="true" keyProperty="checklistId">
        INSERT INTO Checklist (user_id, title, description, type, created_at, updated_at)
        VALUES (#{userId}, #{title}, #{description}, #{type}, NOW(), NOW())
    </insert>

    <!--복제된 Checklist를 Property_Checklist 테이블에 추가-->
    <insert id="insertPropertyChecklist">
        INSERT INTO Property_Checklist (property_id, checklist_id)
        VALUES (#{propertyId}, #{checklistId})
    </insert>

    <!--옵션 하나씩 insert하는 메서드-->
    <insert id="batchInsertItems" parameterType="java.util.List">
        INSERT INTO ChecklistItem (checklist_id, keyword, is_active, is_checked, type)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.checklistId}, #{item.keyword}, #{item.isActive}, #{item.isChecked}, #{item.type})
        </foreach>
    </insert>

<!--  ===========================================================================================  -->

    <!--체크리스트 ID로 제목 조회-->
    <select id="findChecklistTitleById" resultType="string">
        SELECT title FROM Checklist WHERE checklist_id = #{checklistId}
    </select>

    <!--두 개의 새 select 메서드 선언 추가-->
    <select id="findChecklistIdByPropertyAndUser" resultType="long">
        SELECT
            pc.checklist_id
        FROM
            Property_Checklist pc
                JOIN
            Checklist c ON pc.checklist_id = c.checklist_id
        WHERE
            pc.property_id = #{propertyId}
          AND
            c.user_id = #{userId}
            LIMIT 1 -- 한 매물에 한 사용자의 체크리스트는 하나라고 가정
    </select>

    <!--연결된 checklistId를 찾았을 경우, 해당 ID를 이용해 모든 옵션을 조회하여 반환-->
    <select id="findChecklistItemsByChecklistIdAndUser" resultType="org.livin.property.dto.ChecklistItemDTO">
        SELECT
            ci.checklistitem_id AS checklistItemId,
            ci.keyword,
            ci.is_active        AS isActive,
            ci.is_checked       AS isChecked,
            ci.type,
            ci.checklist_id     AS checklistId
        FROM
            ChecklistItem ci
                JOIN
            Checklist c ON ci.checklist_id = c.checklist_id
        WHERE
            ci.checklist_id = #{checklistId}
          AND
            c.user_id = #{userId}
        ORDER BY
            ci.checklistitem_id ASC
    </select>

<!--  ===========================================================================================  -->

    <!--업데이트 목록 전체를 매퍼 메서드에 한 번에 전달-->
    <update id="batchUpdateItemIsChecked">
        UPDATE ChecklistItem ci
        JOIN Checklist c ON c.checklist_id = ci.checklist_id
        SET
        ci.is_checked =
        <foreach collection="updates" item="update" separator=" " open="CASE ci.checklistitem_id" close="END">
            WHEN #{update.checklistItemId} THEN #{update.isChecked}
        </foreach>
        WHERE
        c.user_id = #{userId}
        AND ci.checklist_id = #{checklistId}
        AND ci.checklistitem_id IN
        <foreach collection="updates" item="update" separator="," open="(" close=")">
            #{update.checklistItemId}
        </foreach>
    </update>

</mapper>