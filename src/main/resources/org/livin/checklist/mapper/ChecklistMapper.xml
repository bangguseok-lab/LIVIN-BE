<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.livin.checklist.mapper.ChecklistMapper">
    <!--  체크리스트 전체 목록 조회  -->
    <select id="getAllList" resultType="org.livin.checklist.entity.ChecklistVO">
        SELECT *
        FROM livin.Checklist
        WHERE user_id = #{userId}
        <if test="lastId != null">
            AND checklist_id &lt; #{lastId}
        </if>
        ORDER BY created_at DESC
        LIMIT #{size}
    </select>

    <!--  체크리스트 상세 조회  -->
    <select id="getChecklistDetail" parameterType="long" resultType="org.livin.checklist.dto.ChecklistItemJoinDTO">
        SELECT c.checklist_id,
               c.title,
               c.description,
               c.type AS checklist_type,
               c.created_at,
               c.updated_at,
               i.checklistItem_id,
               i.keyword,
               i.is_active,
               i.type AS item_type
        FROM livin.Checklist c
                 JOIN livin.ChecklistItem i ON c.checklist_id = i.checklist_id
        WHERE c.checklist_id = #{checklistId}
    </select>

    <!--  체크리스트 타입별 아이템 조회  -->
    <resultMap id="ChecklistItemSimpleMap" type="org.livin.checklist.dto.ChecklistItemSimpleDTO">
        <id property="checklistItemId" column="checklistItem_id"/>
        <result property="keyword" column="keyword"/>
        <result property="isActive" column="is_active"/>
        <result property="type" column="type"/>
    </resultMap>

    <select id="getItemListByType" resultMap="ChecklistItemSimpleMap">
        SELECT i.checklistItem_id,
               i.keyword,
               i.is_active,
               i.type
        FROM ChecklistItem i
        WHERE i.checklist_id = #{checklistId}
          AND type = #{type};
    </select>


    <!--  체크리스트 생성  -->
    <insert id="create" useGeneratedKeys="true" keyProperty="checklistId">
        INSERT INTO livin.Checklist (user_id, title, description, type, created_at, updated_at)
        VALUES (#{userId}, #{title}, #{description}, #{type}, NOW(), #{updatedAt})
    </insert>

    <!--  체크리스트의 기본 항목 생성  -->
    <insert id="createChecklistDefaultItem">
        INSERT INTO livin.ChecklistItem (keyword, is_active, type, checklist_id)
        VALUES ('강한 수압', false, 'ROOM', #{checklistId}),
               ('방의 기울기', false, 'ROOM', #{checklistId}),
               ('채광', false, 'ROOM', #{checklistId}),
               ('누수', false, 'ROOM', #{checklistId}),
               ('결로 흔적', false, 'ROOM', #{checklistId}),
               ('곰팡이', false, 'ROOM', #{checklistId}),
               ('벌레', false, 'ROOM', #{checklistId}),
               ('난방 컨디션', false, 'ROOM', #{checklistId}),
               ('전기 컨디션', false, 'ROOM', #{checklistId}),
               ('창문 컨디션', false, 'ROOM', #{checklistId}),
               ('CCTV', false, 'BUILDING', #{checklistId}),
               ('엘레베이터 여부', false, 'BUILDING', #{checklistId})
    </insert>

    <!--  INFRA 타입의 아이템 생성  -->
    <insert id="createInfraItem">
        INSERT INTO livin.ChecklistItem (keyword, is_active, type, checklist_id)
        VALUES ('지하철역', false, 'INFRA', #{checklistId}),
               ('버스정류장', false, 'INFRA', #{checklistId}),
               ('편의점', false, 'INFRA', #{checklistId}),
               ('대로변 근처', false, 'INFRA', #{checklistId}),
               ('문화생활', false, 'INFRA', #{checklistId}),
               ('공원', false, 'INFRA', #{checklistId})
    </insert>

    <!--  OPTION 타입의 아이템 생성  -->
    <insert id="createOptionItem">
        INSERT INTO livin.ChecklistItem (keyword, is_active, type, checklist_id)
        VALUES ('세탁기', false, 'OPTION', #{checklistId}),
               ('냉장고', false, 'OPTION', #{checklistId}),
               ('에어컨', false, 'OPTION', #{checklistId}),
               ('건조기', false, 'OPTION', #{checklistId}),
               ('전자렌지', false, 'OPTION', #{checklistId}),
               ('가스렌지', false, 'OPTION', #{checklistId}),
               ('인덕션', false, 'OPTION', #{checklistId}),
               ('침대', false, 'OPTION', #{checklistId}),
               ('현관문 잠금장치', false, 'OPTION', #{checklistId})
    </insert>


    <!--  CIRCUMSTANCE 타입의 아이템 생성 -->
    <insert id="createCircumstanceItem">
        INSERT INTO livin.ChecklistItem (keyword, is_active, type, checklist_id)
        VALUES ('층간 소음', false, 'CIRCUMSTANCE', #{checklistId}),
               ('방음', false, 'CIRCUMSTANCE', #{checklistId}),
               ('반려동물 가능 유무', false, 'CIRCUMSTANCE', #{checklistId}),
               ('치안', false, 'CIRCUMSTANCE', #{checklistId}),
               ('골목길 가로등 유무', false, 'CIRCUMSTANCE', #{checklistId}),
               ('주위 소음 시설 유무', false, 'CIRCUMSTANCE', #{checklistId})
    </insert>


    <!--  나만의 아이템 생성 -->
    <insert id="createCustomItem">
        INSERT INTO livin.ChecklistItem (keyword, is_active, type, checklist_id)
        VALUES (#{keyword}, false, 'CUSTOM', #{checklistId})
    </insert>


    <!--  체크리스트의 이름, 설명 수정  -->
    <update id="updateChecklist">
        UPDATE livin.Checklist
        SET livin.Checklist.title       = #{title},
            livin.Checklist.description = #{description}
        WHERE livin.Checklist.checklist_id = #{checklistId}
    </update>


    <!--  체크리스트 아이템 활성 상태 수정  -->
    <update id="updateItem">
        UPDATE livin.ChecklistItem
        SET livin.ChecklistItem.is_active = #{isActive}
        WHERE livin.ChecklistItem.checklistItem_id = #{checklistItemId};
    </update>


    <!--  체크리스트 삭제  -->
    <delete id="deleteChecklist">
        DELETE
        FROM livin.Checklist
        WHERE livin.Checklist.checklist_id = #{checklistId}
    </delete>

    <!--  나만의 아이템 삭제  -->
    <delete id="deleteCustomItem">
        DELETE
        FROM livin.ChecklistItem
        WHERE livin.ChecklistItem.checklist_id = #{checklistId}
          AND livin.ChecklistItem.checklistItem_id = #{checklistItemId}
          AND livin.ChecklistItem.type = 'CUSTOM'
    </delete>

    <!--  특정 체크리스트가 적용된 매물 조회 중 등록순 정렬  -->
    <select id="findChecklistCreatedAtByPropertyId" resultType="java.time.LocalDateTime">
        SELECT property_created_at
        FROM Property
        WHERE property_id = #{propertyId}
    </select>

    <!-- 특정 체크리스트 적용된 매물 조회 resultMap -->
    <resultMap id="BasePropertyMap" type="org.livin.property.entity.PropertyVO">
        <id property="propertyId" column="property_id"/>
        <result property="name" column="property_name"/>
        <result property="detailAddress" column="detail_address"/>
        <result property="propertyType" column="property_type"/>
        <result property="transactionType" column="transaction_type"/>
        <result property="jeonseDeposit" column="jeonse_deposit"/>
        <result property="monthlyDeposit" column="monthly_deposit"/>
        <result property="monthlyRent" column="monthly_rent"/>
        <result property="mainDirection" column="main_direction"/>
        <result property="supplyAreaM2" column="supply_area_m2"/>
        <result property="exclusiveAreaM2" column="exclusive_area_m2"/>
        <result property="createdAt" column="property_created_at"/>
        <result property="sido" column="sido"/>
        <result property="sigungu" column="sigungu"/>
        <result property="eupmyendong" column="eupmyendong"/>
        <result property="isSafe" column="is_safe"/>
        <result property="totalFloors" column="total_floors"/>
        <result property="roadAddress" column="road_address"/>
        <result property="thumbnailImageUrl" column="image_url"/>
        <result property="isFavorite" column="is_favorite"/>
    </resultMap>

    <!--  매물 받아와야 할 베이스 정보들  -->
    <sql id="SelectPropertyListBase">
        p.property_id,
        p.name AS property_name,
        p.detail_address,
        p.property_type,
        p.transaction_type,
        p.jeonse_deposit,
        p.monthly_deposit,
        p.monthly_rent,
        p.main_direction,
        p.description,
        p.floor,
        p.supply_area_m2,
        p.exclusive_area_m2,
        p.created_at AS property_created_at,
        p.sido,
        p.sigungu,
        p.eupmyendong,
        r.is_safe,
        b.total_floors,
        b.road_address,
        pi.image_url
    </sql>

    <!--  매물 관련 조회해야 하는 테이블 조인 처리  -->
    <sql id="CommonJoins">
        FROM Property p
        LEFT JOIN riskAnalysis r ON p.property_id = r.property_id
        LEFT JOIN Building b ON p.building_id = b.building_id
        LEFT JOIN FavoriteProperty f ON p.property_id = f.property_id AND f.user_id = #{userId}
        LEFT JOIN PropertyImage pi ON p.property_id = pi.property_id AND pi.represent = true
        INNER JOIN Property_CheckList pc ON p.property_id = pc.property_id
    </sql>

    <sql id="ChecklistFilterCondition">
        <if test="checklistId != null">
            AND pc.checklist_id = #{checklistId}
        </if>
    </sql>

    <!--  일반/관심 매물 필터  -->
    <sql id="FavoritePropertyFilterCondition">
        <if test="isFavorite != null and isFavorite == true">
            AND f.user_id IS NOT NULL
        </if>
    </sql>

    <!-- 전세/월세 필터 -->
    <sql id="TransactionTypeFilterCondition">
        <if test="transactionType != null and transactionType != ''">
            AND p.transaction_type = #{transactionType}
        </if>
    </sql>

    <!-- 지역 필터 -->
    <sql id="RegionFilterCondition">
        <if test="sido != null and sido != '전체'">
            AND p.sido = #{sido}
        </if>
        <if test="sigungu != null and sigungu != '전체'">
            AND p.sigungu = #{sigungu}
        </if>
        <if test="eupmyendong != null and eupmyendong != '전체'">
            AND p.eupmyendong = #{eupmyendong}
        </if>
    </sql>

    <!-- 가격대 필터 -->
    <sql id="PriceFilterCondition">
        AND (
        (p.transaction_type = 'JEONSE'
        <if test="jeonseDepositMin != null">
            AND p.jeonse_deposit &gt;= #{jeonseDepositMin}
        </if>
        <if test="jeonseDepositMax != null">
            AND p.jeonse_deposit &lt;= #{jeonseDepositMax}
        </if>
        )
        OR
        (p.transaction_type = 'MONTHLY_RENT'
        <if test="monthlyDepositMin != null">
            AND p.monthly_deposit &gt;= #{monthlyDepositMin}
        </if>
        <if test="monthlyDepositMax != null">
            AND p.monthly_deposit &lt;= #{monthlyDepositMax}
        </if>
        <if test="monthlyMin != null">
            AND p.monthly_rent &gt;= #{monthlyMin}
        </if>
        <if test="monthlyMax != null">
            AND p.monthly_rent &lt;= #{monthlyMax}
        </if>
        )
        )
    </sql>

    <!-- 안심 매물 필터 -->
    <sql id="SafePropertyFilterCondition">
        <if test="onlySecure != null and onlySecure == true">
            AND r.is_safe = true
        </if>
    </sql>

    <!--  특정 체크리스트 적용된 일반 매물 조회  -->
    <select id="selectChecklistPropertyListByRegion" resultMap="BasePropertyMap"
            parameterType="org.livin.checklist.dto.ChecklistFilteringDTO">
        SELECT
        -- property 정보 SELECT
        <include refid="SelectPropertyListBase"/>,
        CASE WHEN f.user_id IS NOT NULL THEN true ELSE false END AS is_favorite
        -- 매물 필터링에 필요한 데이터 join 처리
        <include refid="CommonJoins"/>
        <where>

            1 = 1

            <!-- 체크리스트 필터링 -->
            <include refid="ChecklistFilterCondition"/>

            -- 일반/관심 매물 필터링
            <include refid="FavoritePropertyFilterCondition"></include>

            -- 전세 월세 필터링
            <include refid="TransactionTypeFilterCondition"/>

            -- 지역 필터링
            <include refid="RegionFilterCondition"/>

            -- 가격 필터링
            <include refid="PriceFilterCondition"/>

            -- 안전 매물 필터링
            <include refid="SafePropertyFilterCondition"/>

            -- 무한 스트롤 기준점
            <if test="lastCreatedAt != null">
                AND p.created_at &lt; #{lastCreatedAt}
            </if>

        </where>
        -- 등록일자 기준 최신순 정렬
        ORDER BY p.created_at DESC
        LIMIT #{limit}
    </select>

    <select id="selectChecklistThumbnailImageByPropertyId" resultType="org.livin.property.entity.PropertyImageVO">
        SELECT property_image_id,
               image_url,
               property_id,
               represent
        FROM PropertyImage
        WHERE property_id = #{propertyId}
          AND represent = true
    </select>
</mapper>
